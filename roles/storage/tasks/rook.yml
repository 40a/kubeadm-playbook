---
# - hosts: master
#   become: yes
#   become_method: sudo
#   tags:
#   - rook
#   tasks:

## rook common:
- block:
  - set_fact:
      env_kc: '{{ proxy_env |default({}) | combine ({"PATH" : "/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin"  }) | combine ({"KUBECONFIG" :"/etc/kubernetes/admin.conf"}) }}'
    tags:
    - always

  - name: k8s cluster pre-installation sanity - check if all current k8s pods are in Running status
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    shell: "kubectl get --all-namespaces pods --no-headers | grep -v -w 'Running' || true "
    register: command_result
    tags:
    - sanity
    until: command_result.stdout == ""
    retries: 30
    delay: 3
    changed_when: false

  - name: ensure jq third party exists on the machine (can come from from epel, pip, etc)
    shell: jq --version
    changed_when: false

  - name: install rook operator (using rook.operator_url)
    environment: '{{env_kc}}'
    command: /usr/bin/kubectl apply -f {{ item }}
    when: rook.operator_url is defined
    with_items:
    - "{{ rook.operator_url  | default ('') }}"

  - name: git clone rook (till charts.rook.io is created)
    environment: '{{env_kc}}'
    git:
      repo: 'https://github.com/rook/rook.git'
      dest: /tmp/rook
      force: yes
      depth: 1
      version: master
      recursive: no
    when: rook.operator_url is defined

  - name: deploy rook operator (using helm chart) - prefered method
    environment: '{{env_kc}}'
    #command: 'helm install {{ item.repo }} --namespace {{ item.namespace | default("default") }} --name {{ item.name }} {{ item.options | default ("") }}'
    #command: 'helm install rook/rook-operator --namespace rook --name rook-operator --set image.pullPolicy=Always '
    command: 'helm install /tmp/rook/demo/helm/rook-operator/ --namespace rook --name rook-operator --set image.pullPolicy=Always '
    when: rook.operator_url is not defined

  - name: rook operator pod sanity
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    shell: "kubectl get --all-namespaces pods --no-headers | grep -v -w 'Running' || true "
    register: command_result
    tags:
    - sanity
    until: command_result.stdout == ""
    retries: 30
    delay: 3
    changed_when: false

  - name: wait for rook.io/, Kind=Cluster to be created
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    shell: kubectl get thirdpartyresources --no-headers | grep rook.io | grep -i cluster
    register: command_result
    tags:
    - sanity
    until: command_result.stdout != ""
    retries: 30
    delay: 3
    changed_when: false

  # This is still required...
  - name: Wait few more seconds for rook.io/, Kind=Cluster to be created
    pause: seconds=0
    changed_when: false

  - name: prepare rook-cluster.yml file
    template:
      src: rook-cluster.j2
      dest: /tmp/rook-cluster.yml
      force: yes
    tags:
    - rook-cluster

  - name: install rook cluster and create rook namespace
    environment: '{{env_kc}}'
    command: /usr/bin/kubectl apply -f {{ item }}
    with_items:
    - /tmp/rook-cluster.yml
    tags:
    - rook-cluster

  - name: rook cluster deploy sanity - wait for all installed pods to become Running
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    shell: "kubectl get --all-namespaces pods --no-headers | grep -v -w 'Running' || true "
    register: command_result
    tags:
    - sanity
    - rook
    until: command_result.stdout == ""
    retries: 30
    delay: 3
    changed_when: false

  - name: prepare rook-ceph_conf-ConfigMap.yml file
    template:
      src: rook_ceph_conf.j2
      dest: /tmp/rook_ceph_conf.yml
      force: yes
    when: rook.ceph_conf is defined 

  - name: install rook ceph_conf config map - namespace rook should be available
    environment: '{{env_kc}}'
    command: /usr/bin/kubectl apply -f {{ item }}
    when: rook.ceph_conf is defined
    with_items:
    - /tmp/rook_ceph_conf.yml

  - name: rook-tools allowed_consumer_namespaces secret injection
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    shell: kubectl get secret rook-admin -n rook -o json | jq '.metadata.namespace = "{{ item }}"' | kubectl apply -f -
    when: rook.allowed_consumer_namespaces is defined
    with_items: "{{ rook.allowed_consumer_namespaces }}"

  - name: install rook client and tools - aka client_tools_url
    environment: '{{env_kc}}'
    command: /usr/bin/kubectl apply -f {{ item }}
    with_items: "{{ rook.client_tools_url | default ('') }}"

  - name: rook client tools deploy sanity - wait for all installed pods to become Running
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    shell: "kubectl get --all-namespaces pods --no-headers | grep -v -w 'Running' || true "
    register: command_result
    when: rook.client_tools_url is defined
    tags:
    - sanity
    until: command_result.stdout == ""
    retries: 30
    delay: 3

  - name: rook cluster deploy full sanity via rook client command rook node ls
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    #kubectl exec -it rook-tools -- bash -c "rook node ls >> /tmp/status.txt"
    shell: "kubectl -n rook exec rook-tools -it /usr/bin/rook node ls | tail -n +2  | grep -v ' OK ' || true "
    register: command_result
    tags:
    - sanity
    until: command_result.stdout == ""
    retries: 30
    delay: 3
    changed_when: false
  when: rook is defined and rook.enabled
  tags:
  - rook

## rook sharedfs:
- block:
  - name: rook-client create rook sharedfs
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    shell: kubectl -n rook exec rook-tools -- rook filesystem create --name {{ item.name | default("sharedfs") }}
    with_items: "{{ rook.sharedfs.fs | default ('') }}"

  - name: rook-tools set replication(redundancy) for sharedfs data
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    shell: kubectl -n rook exec rook-tools -- ceph osd pool set {{ item.name | default("sharedfs") }}-data size {{ item.replication | default (2) }}
    with_items: '{{ rook.sharedfs.fs | default("sharedfs") }}'

  - name: rook-tools set replication(redundancy) for sharedfs metadata
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    shell: kubectl -n rook exec rook-tools -- ceph osd pool set {{ item.name | default("sharedfs") }}-metadata size {{ item.replication | default (2) }}
    with_items: "{{ rook.sharedfs.fs | default('sharedfs') }}"

  - name: wait for rook.io/, Kind=Pool to be created
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    shell: kubectl get thirdpartyresources --no-headers | grep rook.io | grep -i pool
    register: command_result
    tags:
    - sanity
    until: command_result.stdout != ""
    retries: 30
    delay: 3
    changed_when: false
  when: rook is defined and rook.enabled and rook.sharedfs is defined and rook.sharedfs.enabled
  tags:
  - rook
  - rook_sharedfs

## rook rbd:
- block:
  - name: prepare rook-pool.yml file
    template:
      src: rook-pool.j2
      dest: /tmp/rook-pool.yml
      force: yes
    tags:
    - rbd
    when:  rook.rbd is defined and rook.rbd.enabled

  - name: install rook rook-pool.yml file
    environment: '{{env_kc}}'
    command: /usr/bin/kubectl apply -f {{ item }}
    with_items:
    - /tmp/rook-pool.yml
    tags:
    - rbd
    when:  rook.rbd is defined and rook.rbd.enabled

  - name: prepare rook-storageclass.yml file
    template:
      src: rook-storageclass.j2
      dest: /tmp/rook-storageclass.yml
      force: yes
    tags:
    - rbd
    when:  rook.rbd is defined and rook.rbd.enabled

  - name: install rook rook-storageclass.yml file
    environment: '{{env_kc}}'
    command: /usr/bin/kubectl apply -f {{ item }}
    when:  rook.rbd is defined and rook.rbd.enabled
    with_items:
    - /tmp/rook-storageclass.yml
    tags:
    - rbd

  # Block ends. Its condition was:
  when: rook is defined and rook.enabled and rook.rbd is defined and rook.rbd.enabled
  tags:
  - rook
  - rook_rbd




