---
# Debian based (includes Ubuntu)
- name: Install apt-transport-https
  package: name={{ item }} state={{ package_state | default ('latest') }}
  environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - apt-transport-https
  when: ansible_os_family == "Debian"

- apt_key:
    url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
    state: present
  environment: '{{ proxy_env | default ({}) }}'
  when: ansible_os_family == "Debian"

- apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    #filename: 'kubernetes.list'
    update_cache: yes
  environment: '{{ proxy_env | default ({}) }}'
  when: ansible_os_family == "Debian"

# RedHat based (includes CentOS, RHEL, Fedora, Oracle, etc.)
- name: Create kubernetes yum repository
  yum_repository:
    name: kubernetes
    description: Kubernetes
    baseurl: http://yum.kubernetes.io/repos/kubernetes-el7-x86_64
    gpgcheck: 0
  when: ansible_os_family == "RedHat"

- name: add proxy for the repo
  ini_file:
    dest: /etc/yum.repos.d/kubernetes.repo
    section: "{{item}}"
    option: proxy
    value: "{{proxy_env.https_proxy | default ([]) }}"
  with_items: [ 'kubernetes' ]
  when: proxy_env is defined and ansible_os_family == "RedHat"

- name: Disable selinux
  selinux: policy=targeted state=permissive
  when: ansible_os_family == "RedHat"
  register: command_result
  # TODO: changed_when: '"..." not in command_result.stdout '
  # TODO: When message is: "state change will take effect next reboot, config state changed from", trigger machine reboot

- name: Clean yum metadata
  command: yum clean all
  args:
    warn: no
  when: ansible_os_family == "RedHat" and package_state is defined and package_state == "latest" 

- name: apt-get clean metadata
  command: apt-get clean ; apt-file purge
  args:
    warn: no
  when: ansible_os_family == "Debian" and package_state is defined and package_state == "latest"

# End OS dependent repo setup

- name: Install kubeadm
  package: name={{ item }} state={{ package_state | default ('latest') }}
  environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is not defined

- name: Install kubeadm
  package: name={{ item }}-{{kubeadm_version}} state=installed
  environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is defined and ( kubeadm_version!='installed' or kubeadm_version!='latest' )

- name: Install kubeadm
  package: name={{ item }}-{{kubeadm_version}} state=installed
  environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is defined and ( kubeadm_version=='installed' or kubeadm_version=='latest' )

- name: Install packages
  package: name={{ item }} state={{ package_state | default ('latest') }}
  environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubelet
  - kubectl
  - kubernetes-cni
  - docker
  #- kubeadm
  #- docker.io # for ubuntu

- name: Install optional packages like bash-completion
  package: name={{ item }} state={{ package_state | default ('latest') }}
  with_items:
  - bash-completion
  ignore_errors: yes

- name: Install packages required by rook (ceph) storage
  package: name={{ item }} state={{ package_state | default ('latest') }}
  when: rook is defined and rook.enabled
  with_items:
  - ceph-common

- name: Install packages required by rook (ceph) storage setup (usually required only on masters)
  package: name={{ item }} state={{ package_state | default ('latest') }}
  when: rook is defined and rook.enabled
  with_items:
  - jq
  
#- name: Use json-file docker logging driver
#  lineinfile:
#    dest: /etc/sysconfig/docker
#    regexp: '^OPTIONS='
#    line: "OPTIONS='--selinux-enabled --log-driver=json-file --signature-verification=false'"
#  notify:
#  - Restart docker
#  tags: 
#  - docker

- name: Allow insecure registry
  lineinfile:
    dest: /etc/sysconfig/docker
    regexp: '^# INSECURE_REGISTRY='
    line: "INSECURE_REGISTRY='--insecure-registry {{ kubeadm_docker_insecure_registry }}'"
  when:
    kubeadm_docker_insecure_registry is defined
  notify:
  - Restart docker
  tags: 
  - docker

#- name: Use overlay docker storage driver (note: overlay2 is not currently supported by k8s)
#  lineinfile:
#    dest: /etc/sysconfig/docker-storage
#    regexp: '^DOCKER_STORAGE_OPTIONS='
#    line: 'DOCKER_STORAGE_OPTIONS="--storage-driver=overlay"'
#  notify:
#  - Restart docker
#  tags: 
#  - docker

- set_fact: fact_cloud_provider='--cloud-provider={{ kubeadm_master_config.cloudProvider }} --cloud-config=/etc/kubernetes/cloud-config'
  when: kubeadm_master_config.cloudProvider is defined # cloud_config.enabled is defined and cloud_config.enabled and cloud_config.cloud_provider is defined
  tags:
  - always

- name: Replace {{kubeadm_master_config.networking.dnsDomain}} under cluster-domain in kubelet.service.d/10-kubeadm.conf
  replace:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: '(--cluster-domain=)[A-Za-z0-9\-\.]+(.*)'
    replace: '\1{{ kubeadm_master_config.networking.dnsDomain | default("cluster.local") }}\2'
    #backup: yes
  when: kubeadm_master_config.networking.dnsDomain is defined
  notify:
  - Reload systemd
  - Restart kubelet
  tags:
   - kubelet

- name: Remove existing kubelet args from drop-in unit
  lineinfile:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: '^Environment="KUBELET_EXTRA_ARGS'
    state: absent
  notify:
  - Reload systemd
  - Restart kubelet
  tags: 
  - kubelet

- name: Use systemd kubelet cgroup driver
  lineinfile:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    insertafter: '^Environment=\"KUBELET_AUTHZ_ARGS'
    line: Environment="KUBELET_EXTRA_ARGS=--cgroup-driver=systemd {{ fact_cloud_provider | default ('') }} "
  notify:
  - Reload systemd
  - Restart kubelet
  tags: 
  - kubelet

#- set_fact:
#    cloud_config_path: cloud_config.{{kubeadm_master_config.cloudProvider}}
#  when: kubeadm_master_config.cloudProvider is defined

#- name: Writing contents of  {{ cloud_config_path }} to /etc/kubernetes/cloud-config
#  copy: content="{{ kubeadm_master_config.cloud_config_path | to_nice_yaml }}" dest="/etc/kubernetes/cloud-config" force=yes
#  when: kubeadm_master_config.cloudProvider is defined

- name: prepare cloud-config file
  template:
    src: cloud-config.j2
    dest: /etc/kubernetes/cloud-config
    force: yes
  when: kubeadm_master_config.cloudProvider is defined
  tags:
  - init

- name: Create kubeadm sysctl file
  copy: src=90-kubeadm.conf dest=/etc/sysctl.d/90-kubeadm.conf
  tags: 
  - kubelet

- name: Set sysctl settings
  command: sysctl --system

- name: Enable and start docker (optional)
  systemd: state=started enabled=yes name=docker daemon_reload=yes

#- name: Enable and start kubelet
#  systemd: state=started enabled=yes name=kubelet daemon_reload=yes

- name: kubeadm completion preps
  file:
    path: ~/.kube/
    state: directory
    mode: 0755
    
- name: kubeadm completion shell
  shell: kubeadm completion {{ shell | default ('bash') }} > ~/.kube/kubeadm_completion.bash.inc
  args:
    warn: no

- name: kubeadm completion to ~/.bash_profile
  lineinfile:
    dest: ~/.bash_profile
    line: '[[ -x ${HOME}/.kube/kubeadm_completion.bash.inc ]] && source ${HOME}/.kube/kubeadm_completion.bash.inc'
    state: present
  when: shell is undefined or shell == 'bash'

- name: kubectl completion shell
  shell: kubectl completion {{ shell | default ('bash') }} > ~/.kube/completion.bash.inc
  args:
    warn: no

- name: kubectl completion to ~/.bash_profile
  lineinfile:
    dest: ~/.bash_profile
    line: '[[ -x ${HOME}/.kube/completion.bash.inc ]] && source ${HOME}/.kube/completion.bash.inc'
    state: present
  when: shell is undefined or shell == 'bash'

- name: create dir /var/log/journal (so node-problem-detector finds any issues with the nodes, should there be any)
  file:
    path: /var/log/journal
    state: directory
    mode: 0755

# Forcing restart of services
#- meta: flush_handlers

